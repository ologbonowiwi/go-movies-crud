basePath: /api/v1
definitions:
  main.Director:
    properties:
      firstname:
        type: string
      lastname:
        type: string
    type: object
  main.Movie:
    properties:
      director:
        $ref: '#/definitions/main.Director'
      id:
        type: string
      isbn:
        type: string
      title:
        type: string
    type: object
info:
  contact: {}
  description: This is a sample server for a movie store.
  title: Movies CRUD API
  version: 1.0.0
paths:
  /movie:
    post:
      consumes:
      - application/json
      description: create new movie based on received data
      parameters:
      - description: movie data
        in: body
        name: movie
        required: true
        schema:
          $ref: '#/definitions/main.Movie'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/main.Movie'
      summary: Create a new movie
  /movie/{id}:
    delete:
      consumes:
      - application/json
      description: delete movie based on id and returns the remaining movies list
      parameters:
      - description: Id of user that will be deleted
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/main.Movie'
            type: array
      summary: Delete movie
    get:
      consumes:
      - application/json
      description: get movie based on id
      parameters:
      - description: Id of user to get
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/main.Movie'
        "404":
          description: Not Found
      summary: Get single movie
    put:
      consumes:
      - application/json
      description: update existant movie based on his id
      parameters:
      - description: data to update
        in: body
        name: movie
        required: true
        schema:
          $ref: '#/definitions/main.Movie'
      - description: Id of user to be updated
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/main.Movie'
        "404":
          description: Not Found
      summary: Update existant movie
  /movies:
    get:
      consumes:
      - application/json
      description: get all movies
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/main.Movie'
            type: array
        "404":
          description: No movies found
          schema:
            type: string
      summary: List movies
swagger: "2.0"
